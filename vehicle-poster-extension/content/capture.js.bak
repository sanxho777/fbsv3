(() => {
  if (window.__vpHardBoot) return; window.__vpHardBoot = true;
  console.debug("[VP] v4 loaded");

  /* ========== utils ========== */
  const $ = (sel, root=document) => root.querySelector(sel);
  const $$ = (sel, root=document) => Array.from(root.querySelectorAll(sel));
  const txt = el => (el?.textContent || "").trim();
  const toNum = s => { const m = String(s||"").match(/\d+/g); return m ? Number(m.join("")) : null; };
  const norm = s => String(s||"").toLowerCase().replace(/\s+/g," ").replace(/[^\p{L}\p{N} ]+/gu,"").trim();

  /* ========== dt/dd readers (very permissive) ========== */
  function ddByLabels(labels) {
    const wanted = labels.map(norm);
    for (const dt of $$("dt")) {
      const label = norm(txt(dt));
      if (wanted.includes(label)) {
        const dd = dt.nextElementSibling;
        if (dd && dd.tagName?.toLowerCase() === "dd") return txt(dd);
      }
    }
    return "";
  }

  /* fallback: look inside â€œVehicle Previewâ€ side box (Cars.com) */
  function valueNearLabel(labels) {
    const wanted = new Set(labels.map(norm));
    for (const row of $$("tr,li,div")) {
      const s = norm(txt(row));
      for (const w of wanted) {
        if (s.startsWith(w + " ")) {
          // try to take the tail part (after label)
          const tail = txt(row).replace(new RegExp("^\\s*" + w + "\\s*:?\\s*", "i"), "");
          if (tail) return tail;
        }
      }
    }
    return "";
  }

  /* ========== Cars.com readers ========== */
  function getHeaderPrice(){
    const node = $('[data-qa="primary-price"].primary-price') ||
                 $$("[class*='price']").find(n => /\$\s*\d/.test(txt(n)));
    const price = toNum(txt(node));
    return Number.isFinite(price) ? price : null;
  }

  function getHeaderMiles(){
    const a = toNum(txt($(".listing-mileage")));
    if (Number.isFinite(a)) return a;
    const b = toNum(ddByLabels(["Mileage"]));
    if (Number.isFinite(b)) return b;
    const c = toNum(valueNearLabel(["mileage"]));
    return Number.isFinite(c) ? c : null;
  }

  function getTitle(){
    return txt($(".listing-title")) || txt($(".sticky-header-listing-title")) || txt($("h1"));
  }

  function parseYMMT(title){
    let year=null, make="", model="", trim="";
    if (title) {
      const y = title.match(/\b(19|20)\d{2}\b/); if (y) year = +y[0];
      const afterYear = title.replace(/^\s*(?:Used\s+)?\d{4}\s+/, "");
      const parts = afterYear.split(/\s+/);
      make = parts.shift() || "";
      const rest = parts.join(" ").trim();
      const rp = rest.split(/\s+/);
      model = rp.shift() || "";
      trim = rp.join(" ").trim();
    }
    return {year, make, model, trim};
  }

  function readAny(selArr){ for (const s of selArr){ const v = txt($(s)); if (v) return v } return "" }

  function captureCars(){
    const title = getTitle();
    const price = getHeaderPrice();
    const mileage = getHeaderMiles();
    const {year, make, model, trim} = parseYMMT(title);

    const exterior = ddByLabels(["Exterior color","Exterior"]) ||
                     readAny(['[data-qa*="exterior"]','[data-qa="exterior-color"]']) ||
                     valueNearLabel(["exterior","exterior color"]);

    const interior = ddByLabels(["Interior color","Interior"]) ||
                     readAny(['[data-qa*="interior"]','[data-qa="interior-color"]']) ||
                     valueNearLabel(["interior","interior color"]);

    const drivetrain   = ddByLabels(["Drivetrain"])   || readAny(['[data-qa*="drivetrain"]']);
    const transmission = ddByLabels(["Transmission"]) || readAny(['[data-qa*="transmission"]']);
    const engine       = ddByLabels(["Engine"])       || readAny(['[data-qa*="engine"]']);
    const fuel         = ddByLabels(["Fuel type","Fuel"]) || readAny(['[data-qa*="fuel"]']);
    const vin          = ddByLabels(["VIN"])          || readAny(['[data-qa*="vin"]']);

    let images = $$("img").map(i => i.currentSrc || i.src).filter(Boolean);
    images = Array.from(new Set(images)).slice(0, 40);

    return { source:"cars.com", title, year, make, model, trim, price, mileage,
             exterior, interior, drivetrain, transmission, engine, fuel, vin, images };
  }

  function captureAT(){
    const title = txt($("h1")) || txt($("[data-cmp='heading']"));
    const price = toNum(txt($("[data-cmp='first-price'],[data-cmp='pricing']")));
    const mileage = toNum(txt($("[data-cmp='mileage']")));
    return { source:"autotrader", title, price, mileage };
  }

  function detectAndCapture(){
    const h = location.hostname;
    if (h.includes("cars.com")) return captureCars();
    if (h.includes("autotrader.com")) return captureAT();
    return { source:h, note:"no profile" };
  }

  /* ========== overlay (inline CSS; no external files) ========== */
  function mountOverlay(){
    if (document.getElementById("vp-shadow-host")) return;
    const host = document.createElement("div"); host.id="vp-shadow-host";
    document.documentElement.appendChild(host);
    const shadow = host.attachShadow({mode:"open"});

    const style = document.createElement("style");
    style.textContent = `
      :host, .vp-root { all: initial; font-family: ui-sans-serif, system-ui, -apple-system, Segoe UI, Roboto, Arial; }
      .vp-pill { position:fixed; right:18px; bottom:18px; z-index:2147483647; padding:10px 14px; border-radius:999px; background:#111; color:#fff; font-weight:600; box-shadow:0 8px 20px rgba(0,0,0,.25); cursor:pointer; user-select:none; }
      .vp-backdrop { position:fixed; inset:0; background:rgba(0,0,0,.35); z-index:2147483646; display:none; }
      .vp-backdrop.open { display:block; }
      .vp-modal { position:fixed; top:50%; left:50%; transform:translate(-50%,-50%); width:520px; max-height:78vh; overflow:auto; padding:18px; background:#fff; color:#111; border-radius:16px; z-index:2147483647; box-shadow:0 30px 80px rgba(0,0,0,.35); display:none; }
      .vp-modal.open { display:block; }
      .vp-hdr { display:flex; align-items:center; justify-content:space-between; margin-bottom:10px; }
      .vp-title { font-size:18px; font-weight:700; }
      .vp-sub { font-size:12px; color:#666; }
      .vp-rows { margin-top:6px; border-top:1px solid #eee; }
      .vp-row { display:flex; justify-content:space-between; gap:12px; padding:8px 0; border-bottom:1px solid #f1f1f1; }
      .vp-row b { color:#444; min-width:140px; }
      .vp-actions { display:flex; gap:10px; margin-top:12px; }
      .vp-btn { flex:1; padding:11px 12px; border-radius:10px; border:1px solid #e5e7eb; cursor:pointer; background:#111; color:#fff; font-weight:700; }
      .vp-btn.secondary { background:#fff; color:#111; }
      .vp-msg { font-size:12px; color:#666; margin-top:6px; }
    `;
    shadow.appendChild(style);

    const root = document.createElement("div");
    root.className = "vp-root";
    root.innerHTML = `
      <div class="vp-pill" id="vp-pill">Vehicle Tools</div>
      <div class="vp-backdrop" id="vp-backdrop"></div>
      <div class="vp-modal" id="vp-modal">
        <div class="vp-hdr">
          <div>
            <div class="vp-title">Vehicle Preview</div>
            <div class="vp-sub">source: <span id="vp-source">â€“</span></div>
          </div>
          <button class="vp-btn secondary" id="vp-close" style="flex:0 0 auto;padding:6px 10px;">Close</button>
        </div>
        <div class="vp-actions" style="margin-top:0">
          <button class="vp-btn secondary" id="vp-scan">Scan Vehicle</button>
          <button class="vp-btn" id="vp-send">Send to Bridge</button>
        </div>
        <div class="vp-rows" id="vp-rows"></div>
        <div class="vp-msg" id="vp-msg"></div>
      </div>
    `;
    shadow.appendChild(root);

    const pill  = shadow.getElementById("vp-pill");
    const back  = shadow.getElementById("vp-backdrop");
    const modal = shadow.getElementById("vp-modal");
    const rows  = shadow.getElementById("vp-rows");
    const send  = shadow.getElementById("vp-send");
    const scan  = shadow.getElementById("vp-scan");
    const close = shadow.getElementById("vp-close");
    const msg   = shadow.getElementById("vp-msg");
    const srcEl = shadow.getElementById("vp-source");

    const open  = () => { modal.classList.add("open"); back.classList.add("open"); };
    const closeFn= () => { modal.classList.remove("open"); back.classList.remove("open"); msg.textContent=""; };
    pill.addEventListener("click", open); back.addEventListener("click", closeFn); close.addEventListener("click", closeFn);

    let last = null;
    function render(v){
      srcEl.textContent = v.source || "â€“";
      const entries = [
        ["Title", v.title],["Year", v.year],["Make", v.make],["Model", v.model],["Trim", v.trim],
        ["Price", v.price ? `$${v.price.toLocaleString()}` : ""],
        ["Mileage", v.mileage ? `${v.mileage.toLocaleString()} mi` : ""],
        ["Exterior", v.exterior],["Interior", v.interior],
        ["Drivetrain", v.drivetrain],["Transmission", v.transmission],
        ["Engine", v.engine],["Fuel", v.fuel],["VIN", v.vin],
        ["Images", v.images?.length || 0]
      ];
      rows.innerHTML = entries.map(([k,val]) => `<div class="vp-row"><b>${k}</b><div>${val ?? ""}</div></div>`).join("");
    }

    scan.addEventListener("click", () => {
      last = detectAndCapture();
      render(last);
      msg.textContent = "Scanned âœ“";
    });

    send.addEventListener("click", async () => {
      try{
        if (!last) { last = detectAndCapture(); render(last); }
        msg.textContent = "Sendingâ€¦";
        const res = await fetch("http://localhost:3323/capture", {
          method:"POST", headers:{ "Content-Type":"application/json" },
          body: JSON.stringify(last)
        });
        msg.textContent = res.ok ? "âœ… Sent to Node bridge." : `âš ï¸ Bridge error ${res.status}`;
      }catch(e){ msg.textContent = "âš ï¸ " + (e?.message||e) }
    });

    // quick console helpers
    window.__capturePrice   = getHeaderPrice;
    window.__captureMileage = getHeaderMiles;
  }

  if (document.readyState === "loading") {
    document.addEventListener("DOMContentLoaded", mountOverlay, {once:true});
  } else {
    mountOverlay();
  }
})();